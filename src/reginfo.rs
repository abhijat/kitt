use anyhow::{anyhow, Result};
use nix::libc::{user, user_fpregs_struct, user_regs_struct};
use std::ffi::{c_uint, c_ulonglong, c_ushort};
use std::mem::offset_of;
use std::sync::LazyLock;

#[derive(Eq, PartialEq)]
pub enum RegisterId {
    RAX,
    RDX,
    RCX,
    RBX,
    RSI,
    RDI,
    RBP,
    RSP,
    R8,
    R9,
    R10,
    R11,
    R12,
    R13,
    R14,
    R15,
    RIP,
    EFLAGS,
    CS,
    FS,
    GS,
    SS,
    DS,
    ES,
    ORIG_RAX,
    EAX,
    EDX,
    ECX,
    EBX,
    ESI,
    EDI,
    EBP,
    ESP,
    R8D,
    R9D,
    R10D,
    R11D,
    R12D,
    R13D,
    R14D,
    R15D,
    AX,
    DX,
    CX,
    BX,
    SI,
    DI,
    BP,
    SP,
    R8W,
    R9W,
    R10W,
    R11W,
    R12W,
    R13W,
    R14W,
    R15W,
    AH,
    DH,
    CH,
    BH,
    AL,
    DL,
    CL,
    BL,
    SIL,
    DIL,
    BPL,
    SPL,
    R8B,
    R9B,
    R10B,
    R11B,
    R12B,
    R13B,
    R14B,
    R15B,
    FCW,
    FSW,
    FTW,
    FOP,
    FRIP,
    FRDP,
    MXCSR,
    MXCSRMASK,
    ST0,
    ST1,
    ST2,
    ST3,
    ST4,
    ST5,
    ST6,
    ST7,
    MM0,
    MM1,
    MM2,
    MM3,
    MM4,
    MM5,
    MM6,
    MM7,
    XMM0,
    XMM1,
    XMM2,
    XMM3,
    XMM4,
    XMM5,
    XMM6,
    XMM7,
    XMM8,
    XMM9,
    XMM10,
    XMM11,
    XMM12,
    XMM13,
    XMM14,
    XMM15,
    DR0,
    DR1,
    DR2,
    DR3,
    DR4,
    DR5,
    DR6,
    DR7,
}

impl RegisterId {
    fn dwarf_id(&self) -> i32 {
        match self {
            RegisterId::RAX => 0,
            RegisterId::RDX => 1,
            RegisterId::RCX => 2,
            RegisterId::RBX => 3,
            RegisterId::RSI => 4,
            RegisterId::RDI => 5,
            RegisterId::RBP => 6,
            RegisterId::RSP => 7,
            RegisterId::R8 => 8,
            RegisterId::R9 => 9,
            RegisterId::R10 => 10,
            RegisterId::R11 => 11,
            RegisterId::R12 => 12,
            RegisterId::R13 => 13,
            RegisterId::R14 => 14,
            RegisterId::R15 => 15,
            RegisterId::RIP => 16,
            RegisterId::EFLAGS => 49,
            RegisterId::CS => 51,
            RegisterId::FS => 54,
            RegisterId::GS => 55,
            RegisterId::SS => 52,
            RegisterId::DS => 53,
            RegisterId::ES => 50,
            RegisterId::ORIG_RAX => -1,
            RegisterId::EAX => -1,
            RegisterId::EDX => -1,
            RegisterId::ECX => -1,
            RegisterId::EBX => -1,
            RegisterId::ESI => -1,
            RegisterId::EDI => -1,
            RegisterId::EBP => -1,
            RegisterId::ESP => -1,
            RegisterId::R8D => -1,
            RegisterId::R9D => -1,
            RegisterId::R10D => -1,
            RegisterId::R11D => -1,
            RegisterId::R12D => -1,
            RegisterId::R13D => -1,
            RegisterId::R14D => -1,
            RegisterId::R15D => -1,
            RegisterId::AX => -1,
            RegisterId::DX => -1,
            RegisterId::CX => -1,
            RegisterId::BX => -1,
            RegisterId::SI => -1,
            RegisterId::DI => -1,
            RegisterId::BP => -1,
            RegisterId::SP => -1,
            RegisterId::R8W => -1,
            RegisterId::R9W => -1,
            RegisterId::R10W => -1,
            RegisterId::R11W => -1,
            RegisterId::R12W => -1,
            RegisterId::R13W => -1,
            RegisterId::R14W => -1,
            RegisterId::R15W => -1,
            RegisterId::AH => -1,
            RegisterId::DH => -1,
            RegisterId::CH => -1,
            RegisterId::BH => -1,
            RegisterId::AL => -1,
            RegisterId::DL => -1,
            RegisterId::CL => -1,
            RegisterId::BL => -1,
            RegisterId::SIL => -1,
            RegisterId::DIL => -1,
            RegisterId::BPL => -1,
            RegisterId::SPL => -1,
            RegisterId::R8B => -1,
            RegisterId::R9B => -1,
            RegisterId::R10B => -1,
            RegisterId::R11B => -1,
            RegisterId::R12B => -1,
            RegisterId::R13B => -1,
            RegisterId::R14B => -1,
            RegisterId::R15B => -1,
            RegisterId::FCW => 65,
            RegisterId::FSW => 66,
            RegisterId::FTW => -1,
            RegisterId::FOP => -1,
            RegisterId::FRIP => -1,
            RegisterId::FRDP => -1,
            RegisterId::MXCSR => 64,
            RegisterId::MXCSRMASK => -1,
            RegisterId::ST0 => 33,
            RegisterId::ST1 => 34,
            RegisterId::ST2 => 35,
            RegisterId::ST3 => 36,
            RegisterId::ST4 => 37,
            RegisterId::ST5 => 38,
            RegisterId::ST6 => 39,
            RegisterId::ST7 => 40,
            RegisterId::MM0 => 41,
            RegisterId::MM1 => 42,
            RegisterId::MM2 => 43,
            RegisterId::MM3 => 44,
            RegisterId::MM4 => 45,
            RegisterId::MM5 => 46,
            RegisterId::MM6 => 47,
            RegisterId::MM7 => 48,
            RegisterId::XMM0 => 17,
            RegisterId::XMM1 => 18,
            RegisterId::XMM2 => 19,
            RegisterId::XMM3 => 20,
            RegisterId::XMM4 => 21,
            RegisterId::XMM5 => 22,
            RegisterId::XMM6 => 23,
            RegisterId::XMM7 => 24,
            RegisterId::XMM8 => 25,
            RegisterId::XMM9 => 26,
            RegisterId::XMM10 => 27,
            RegisterId::XMM11 => 28,
            RegisterId::XMM12 => 29,
            RegisterId::XMM13 => 30,
            RegisterId::XMM14 => 31,
            RegisterId::XMM15 => 32,
            RegisterId::DR0 => -1,
            RegisterId::DR1 => -1,
            RegisterId::DR2 => -1,
            RegisterId::DR3 => -1,
            RegisterId::DR4 => -1,
            RegisterId::DR5 => -1,
            RegisterId::DR6 => -1,
            RegisterId::DR7 => -1,
        }
    }
}

pub enum RegisterKind {
    GeneralPurpose,
    SubGeneralPurpose,
    FloatingPoint,
    Debug,
}

pub enum RegisterFormat {
    Uint,
    DoubleFloat,
    LongDouble,
    Vector,
}

pub struct RegisterInfo {
    pub id: RegisterId,
    pub name: String,
    pub size: usize,
    pub offset: usize,
    pub kind: RegisterKind,
    pub format: RegisterFormat,
}

fn lookup_register_info(f: impl Fn(&RegisterInfo) -> bool) -> Result<&'static RegisterInfo> {
    (&*REGISTER_INFO)
        .iter()
        .find(|r| f(r))
        .ok_or(anyhow!("failed to find register info"))
}

pub fn lookup_register_info_by_id(id: RegisterId) -> Result<&'static RegisterInfo> {
    lookup_register_info(|r| r.id == id)
}

pub fn lookup_register_info_by_name(name: &str) -> Result<&'static RegisterInfo> {
    lookup_register_info(|r| r.name == name)
}

pub fn lookup_register_by_dwarf(dwarf_id: i32) -> Result<&'static RegisterInfo> {
    lookup_register_info(|r| r.id.dwarf_id() == dwarf_id)
}

const USER_REGS_OFFSET: usize = offset_of!(user, regs);
const FPR_OFFSET: usize = offset_of!(user, i387);
const ST_SPACE_OFFSET: usize = offset_of!(user_fpregs_struct, st_space);
const XMM_SPACE_OFFSET: usize = offset_of!(user_fpregs_struct, xmm_space);

static REGISTER_INFO: LazyLock<[RegisterInfo; 125]> = LazyLock::new(|| {
    [
        RegisterInfo {
            id: RegisterId::RAX,
            name: "RAX".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rax),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RDX,
            name: "RDX".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdx),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RCX,
            name: "RCX".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rcx),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RBX,
            name: "RBX".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbx),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RSI,
            name: "RSI".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsi),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RDI,
            name: "RDI".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdi),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RBP,
            name: "RBP".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbp),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RSP,
            name: "RSP".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsp),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R8,
            name: "R8".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r8),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R9,
            name: "R9".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r9),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R10,
            name: "R10".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r10),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R11,
            name: "R11".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r11),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R12,
            name: "R12".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r12),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R13,
            name: "R13".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r13),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R14,
            name: "R14".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r14),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R15,
            name: "R15".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r15),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::RIP,
            name: "RIP".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rip),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::EFLAGS,
            name: "EFLAGS".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, eflags),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::CS,
            name: "CS".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, cs),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::FS,
            name: "FS".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, fs),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::GS,
            name: "GS".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, gs),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::SS,
            name: "SS".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, ss),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DS,
            name: "DS".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, ds),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::ES,
            name: "ES".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, es),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::ORIG_RAX,
            name: "ORIG_RAX".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, orig_rax),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::EAX,
            name: "EAX".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rax),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::EDX,
            name: "EDX".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::ECX,
            name: "ECX".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rcx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::EBX,
            name: "EBX".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::ESI,
            name: "ESI".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsi),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::EDI,
            name: "EDI".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdi),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::EBP,
            name: "EBP".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbp),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::ESP,
            name: "ESP".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsp),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R8D,
            name: "R8D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r8),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R9D,
            name: "R9D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r9),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R10D,
            name: "R10D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r10),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R11D,
            name: "R11D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r11),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R12D,
            name: "R12D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r12),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R13D,
            name: "R13D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r13),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R14D,
            name: "R14D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r14),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R15D,
            name: "R15D".to_string(),
            size: 4,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r15),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::AX,
            name: "AX".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rax),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DX,
            name: "DX".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::CX,
            name: "CX".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rcx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::BX,
            name: "BX".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::SI,
            name: "SI".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsi),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DI,
            name: "DI".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdi),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::BP,
            name: "BP".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbp),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::SP,
            name: "SP".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsp),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R8W,
            name: "R8W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r8),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R9W,
            name: "R9W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r9),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R10W,
            name: "R10W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r10),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R11W,
            name: "R11W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r11),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R12W,
            name: "R12W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r12),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R13W,
            name: "R13W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r13),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R14W,
            name: "R14W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r14),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R15W,
            name: "R15W".to_string(),
            size: 2,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r15),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::AH,
            name: "AH".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rax) + 1,
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DH,
            name: "DH".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdx) + 1,
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::CH,
            name: "CH".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rcx) + 1,
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::BH,
            name: "BH".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbx) + 1,
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::AL,
            name: "AL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rax),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DL,
            name: "DL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::CL,
            name: "CL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rcx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::BL,
            name: "BL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbx),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::SIL,
            name: "SIL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsi),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DIL,
            name: "DIL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rdi),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::BPL,
            name: "BPL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rbp),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::SPL,
            name: "SPL".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, rsp),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R8B,
            name: "R8B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r8),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R9B,
            name: "R9B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r9),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R10B,
            name: "R10B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r10),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R11B,
            name: "R11B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r11),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R12B,
            name: "R12B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r12),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R13B,
            name: "R13B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r13),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R14B,
            name: "R14B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r14),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::R15B,
            name: "R15B".to_string(),
            size: 1,
            offset: USER_REGS_OFFSET + offset_of!(user_regs_struct, r15),
            kind: RegisterKind::SubGeneralPurpose,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::FCW,
            name: "FCW".to_string(),
            size: size_of::<c_ushort>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, cwd),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::FSW,
            name: "FSW".to_string(),
            size: size_of::<c_ushort>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, swd),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::FTW,
            name: "FTW".to_string(),
            size: size_of::<c_ushort>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, ftw),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::FOP,
            name: "FOP".to_string(),
            size: size_of::<c_ushort>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, fop),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::FRIP,
            name: "FRIP".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, rip),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::FRDP,
            name: "FRDP".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, rdp),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::MXCSR,
            name: "MXCSR".to_string(),
            size: size_of::<c_uint>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, mxcsr),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::MXCSRMASK,
            name: "MXCSRMASK".to_string(),
            size: size_of::<c_uint>(),
            offset: FPR_OFFSET + offset_of!(user_fpregs_struct, mxcr_mask),
            kind: RegisterKind::FloatingPoint,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::ST0,
            name: "ST0".to_string(),
            size: 2,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (0 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::ST1,
            name: "ST1".to_string(),
            size: 16,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (1 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::ST2,
            name: "ST2".to_string(),
            size: 16,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (2 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::ST3,
            name: "ST3".to_string(),
            size: 16,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (3 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::ST4,
            name: "ST4".to_string(),
            size: 16,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (4 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::ST5,
            name: "ST5".to_string(),
            size: 16,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (5 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::ST6,
            name: "ST6".to_string(),
            size: 16,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (6 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::ST7,
            name: "ST7".to_string(),
            size: 16,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (7 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::LongDouble,
        },
        RegisterInfo {
            id: RegisterId::MM0,
            name: "MM0".to_string(),
            size: 86,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (0 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::MM1,
            name: "MM1".to_string(),
            size: 8,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (1 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::MM2,
            name: "MM2".to_string(),
            size: 8,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (2 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::MM3,
            name: "MM3".to_string(),
            size: 8,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (3 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::MM4,
            name: "MM4".to_string(),
            size: 8,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (4 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::MM5,
            name: "MM5".to_string(),
            size: 8,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (5 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::MM6,
            name: "MM6".to_string(),
            size: 8,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (6 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::MM7,
            name: "MM7".to_string(),
            size: 8,
            offset: FPR_OFFSET + ST_SPACE_OFFSET + (7 * 16),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM0,
            name: "XMM0".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 0),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM1,
            name: "XMM1".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 1),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM2,
            name: "XMM2".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 2),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM3,
            name: "XMM3".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 3),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM4,
            name: "XMM4".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 4),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM5,
            name: "XMM5".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 5),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM6,
            name: "XMM6".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 6),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM7,
            name: "XMM7".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 7),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM8,
            name: "XMM8".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 8),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM9,
            name: "XMM9".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 9),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM10,
            name: "XMM10".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 10),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM11,
            name: "XMM11".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 11),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM12,
            name: "XMM12".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 12),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM13,
            name: "XMM13".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 13),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM14,
            name: "XMM14".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 14),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::XMM15,
            name: "XMM15".to_string(),
            size: 16,
            offset: FPR_OFFSET + XMM_SPACE_OFFSET + (16 * 15),
            kind: RegisterKind::GeneralPurpose,
            format: RegisterFormat::Vector,
        },
        RegisterInfo {
            id: RegisterId::DR0,
            name: "DR0".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 0),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DR1,
            name: "DR1".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 1),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DR2,
            name: "DR2".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 2),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DR3,
            name: "DR3".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 3),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DR4,
            name: "DR4".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 4),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DR5,
            name: "DR5".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 5),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DR6,
            name: "DR6".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 6),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
        RegisterInfo {
            id: RegisterId::DR7,
            name: "DR7".to_string(),
            size: size_of::<c_ulonglong>(),
            offset: offset_of!(user, u_debugreg) + (8 * 7),
            kind: RegisterKind::Debug,
            format: RegisterFormat::Uint,
        },
    ]
});
