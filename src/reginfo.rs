use crate::reg_macros::*;
use anyhow::{anyhow, Result};
use nix::libc::{user, user_fpregs_struct, user_regs_struct};
use std::mem::offset_of;
use std::sync::LazyLock;

#[derive(Eq, PartialEq, Copy, Clone, Debug)]
pub enum RegisterId {
    RAX,
    RDX,
    RCX,
    RBX,
    RSI,
    RDI,
    RBP,
    RSP,
    R8,
    R9,
    R10,
    R11,
    R12,
    R13,
    R14,
    R15,
    RIP,
    EFLAGS,
    CS,
    FS,
    GS,
    SS,
    DS,
    ES,
    ORIG_RAX,
    EAX,
    EDX,
    ECX,
    EBX,
    ESI,
    EDI,
    EBP,
    ESP,
    R8D,
    R9D,
    R10D,
    R11D,
    R12D,
    R13D,
    R14D,
    R15D,
    AX,
    DX,
    CX,
    BX,
    SI,
    DI,
    BP,
    SP,
    R8W,
    R9W,
    R10W,
    R11W,
    R12W,
    R13W,
    R14W,
    R15W,
    AH,
    DH,
    CH,
    BH,
    AL,
    DL,
    CL,
    BL,
    SIL,
    DIL,
    BPL,
    SPL,
    R8B,
    R9B,
    R10B,
    R11B,
    R12B,
    R13B,
    R14B,
    R15B,
    FCW,
    FSW,
    FTW,
    FOP,
    FRIP,
    FRDP,
    MXCSR,
    MXCSRMASK,
    ST0,
    ST1,
    ST2,
    ST3,
    ST4,
    ST5,
    ST6,
    ST7,
    MM0,
    MM1,
    MM2,
    MM3,
    MM4,
    MM5,
    MM6,
    MM7,
    XMM0,
    XMM1,
    XMM2,
    XMM3,
    XMM4,
    XMM5,
    XMM6,
    XMM7,
    XMM8,
    XMM9,
    XMM10,
    XMM11,
    XMM12,
    XMM13,
    XMM14,
    XMM15,
    DR0,
    DR1,
    DR2,
    DR3,
    DR4,
    DR5,
    DR6,
    DR7,
}

impl RegisterId {
    pub fn debug_register(index: u8) -> RegisterId {
        match index {
            0 => RegisterId::DR0,
            1 => RegisterId::DR1,
            2 => RegisterId::DR2,
            3 => RegisterId::DR3,
            4 => RegisterId::DR4,
            5 => RegisterId::DR5,
            6 => RegisterId::DR6,
            7 => RegisterId::DR7,
            _ => panic!("invalid index {index}"),
        }
    }
}

#[derive(Copy, Clone, Debug)]
pub enum RegisterKind {
    GeneralPurpose,
    SubGeneralPurpose,
    FloatingPoint,
    Debug,
}

#[derive(Copy, Clone, Debug)]
pub enum RegisterFormat {
    Uint,
    DoubleFloat,
    LongDouble,
    Vector,
}

#[derive(Debug)]
pub struct RegisterInfo {
    pub id: RegisterId,
    pub name: String,
    pub dwarf_id: i32,
    pub size: usize,
    pub offset: usize,
    pub kind: RegisterKind,
    pub format: RegisterFormat,
}

fn lookup_register_info(f: impl Fn(&RegisterInfo) -> bool) -> Result<&'static RegisterInfo> {
    (&*REGISTER_INFO)
        .iter()
        .find(|r| f(r))
        .ok_or(anyhow!("failed to find register info"))
}

pub fn lookup_register_info_by_id(id: RegisterId) -> Result<&'static RegisterInfo> {
    lookup_register_info(|r| r.id == id)
}

pub fn lookup_register_info_by_name(name: &str) -> Result<&'static RegisterInfo> {
    lookup_register_info(|r| r.name == name)
}

pub fn lookup_register_by_dwarf(dwarf_id: i32) -> Result<&'static RegisterInfo> {
    lookup_register_info(|r| r.dwarf_id == dwarf_id)
}

static REGISTER_INFO: LazyLock<[RegisterInfo; 125]> = LazyLock::new(|| {
    [
        gpr64!(RAX, rax, 0),
        gpr64!(RDX, rdx, 1),
        gpr64!(RCX, rcx, 2),
        gpr64!(RBX, rbx, 3),
        gpr64!(RSI, rsi, 4),
        gpr64!(RDI, rdi, 5),
        gpr64!(RBP, rbp, 6),
        gpr64!(RSP, rsp, 7),
        gpr64!(R8, r8, 8),
        gpr64!(R9, r9, 9),
        gpr64!(R10, r10, 10),
        gpr64!(R11, r11, 11),
        gpr64!(R12, r12, 12),
        gpr64!(R13, r13, 13),
        gpr64!(R14, r14, 14),
        gpr64!(R15, r15, 15),
        gpr64!(RIP, rip, 16),
        gpr64!(EFLAGS, eflags, 49),
        gpr64!(CS, cs, 51),
        gpr64!(FS, fs, 54),
        gpr64!(GS, gs, 55),
        gpr64!(SS, ss, 52),
        gpr64!(DS, ds, 53),
        gpr64!(ES, es, 50),
        gpr64!(ORIG_RAX, orig_rax, -1),
        gpr32!(EAX, rax),
        gpr32!(EDX, rdx),
        gpr32!(ECX, rcx),
        gpr32!(EBX, rbx),
        gpr32!(ESI, rsi),
        gpr32!(EDI, rdi),
        gpr32!(EBP, rbp),
        gpr32!(ESP, rsp),
        gpr32!(R8D, r8),
        gpr32!(R9D, r9),
        gpr32!(R10D, r10),
        gpr32!(R11D, r11),
        gpr32!(R12D, r12),
        gpr32!(R13D, r13),
        gpr32!(R14D, r14),
        gpr32!(R15D, r15),
        gpr16!(AX, rax),
        gpr16!(DX, rdx),
        gpr16!(CX, rcx),
        gpr16!(BX, rbx),
        gpr16!(SI, rsi),
        gpr16!(DI, rdi),
        gpr16!(BP, rbp),
        gpr16!(SP, rsp),
        gpr16!(R8W, r8),
        gpr16!(R9W, r9),
        gpr16!(R10W, r10),
        gpr16!(R11W, r11),
        gpr16!(R12W, r12),
        gpr16!(R13W, r13),
        gpr16!(R14W, r14),
        gpr16!(R15W, r15),
        gpr8_hi!(AH, rax),
        gpr8_hi!(DH, rdx),
        gpr8_hi!(CH, rcx),
        gpr8_hi!(BH, rbx),
        gpr8_lo!(AL, rax),
        gpr8_lo!(DL, rdx),
        gpr8_lo!(CL, rcx),
        gpr8_lo!(BL, rbx),
        gpr8_lo!(SIL, rsi),
        gpr8_lo!(DIL, rdi),
        gpr8_lo!(BPL, rbp),
        gpr8_lo!(SPL, rsp),
        gpr8_lo!(R8B, r8),
        gpr8_lo!(R9B, r9),
        gpr8_lo!(R10B, r10),
        gpr8_lo!(R11B, r11),
        gpr8_lo!(R12B, r12),
        gpr8_lo!(R13B, r13),
        gpr8_lo!(R14B, r14),
        gpr8_lo!(R15B, r15),
        fpr!(FCW, -1, cwd, 2),
        fpr!(FSW, -1, swd, 2),
        fpr!(FTW, -1, ftw, 2),
        fpr!(FOP, -1, fop, 2),
        fpr!(FRIP, -1, rip, 8),
        fpr!(FRDP, -1, rdp, 8),
        fpr!(MXCSR, -1, mxcsr, 4),
        fpr!(MXCSRMASK, -1, mxcr_mask, 4),
        fp_st!(ST0, 0),
        fp_st!(ST1, 1),
        fp_st!(ST2, 2),
        fp_st!(ST3, 3),
        fp_st!(ST4, 4),
        fp_st!(ST5, 5),
        fp_st!(ST6, 6),
        fp_st!(ST7, 7),
        fp_mm!(MM0, 0),
        fp_mm!(MM1, 1),
        fp_mm!(MM2, 2),
        fp_mm!(MM3, 3),
        fp_mm!(MM4, 4),
        fp_mm!(MM5, 5),
        fp_mm!(MM6, 6),
        fp_mm!(MM7, 7),
        xmm!(XMM0, 0),
        xmm!(XMM1, 1),
        xmm!(XMM2, 2),
        xmm!(XMM3, 3),
        xmm!(XMM4, 4),
        xmm!(XMM5, 5),
        xmm!(XMM6, 6),
        xmm!(XMM7, 7),
        xmm!(XMM8, 8),
        xmm!(XMM9, 9),
        xmm!(XMM10, 10),
        xmm!(XMM11, 11),
        xmm!(XMM12, 12),
        xmm!(XMM13, 13),
        xmm!(XMM14, 14),
        xmm!(XMM15, 15),
        debugreg!(DR0, 0),
        debugreg!(DR1, 1),
        debugreg!(DR2, 2),
        debugreg!(DR3, 3),
        debugreg!(DR4, 4),
        debugreg!(DR5, 5),
        debugreg!(DR6, 6),
        debugreg!(DR7, 7),
    ]
});
